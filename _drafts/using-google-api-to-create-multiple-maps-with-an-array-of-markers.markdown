---
title: Using Google API to Create Multiple Maps with an Array of Markers
date: 2016-09-01 21:51:00 Z
---

Whilst working on a project for a letting company, I was asked to add a way to group properties by a defined location. The client wanted each location to be displayed on an overview page, utilising a map to show potential properties in the area.

As I was writing the site using WordPress, the system stored the data using a page (locations), sub page (single location), and custom post type (properties). I used this information to get the maps onto the front-end and automatically be updated whenever the client changed any of the data in the back-end.

The front-end of the code looked a little similar to the below image, repeated for each location that was stored. 

![fla-location-preview.png](/uploads/fla-location-preview.png)

### Including the Google Maps API

Before we can do anything else we need to include the Google Maps API. Within our `<head>` make sure you have the following code.

~~~html
<script src='//maps.googleapis.com/maps/api/js'></script>
~~~

### Setting up the PHP

Below I’ve included a copy of the output generated by the `WP_Query`, this is to give you an example of the PHP array that was being used and how to tweak the code to work with your own array.

~~~php
Array 
(
  [0] => Array 
  (
    [0] => Array 
    (
      [0] => 51.5010095
      [1] => -0.1932793999999376
    )
    [1] => Array 
    (
      [0] => 51.5089037
      [1] => -0.19502280000006067
    )
    [2] => Array 
    (
      [0] => 51.4931511
      [1] => -0.18245690000003378
    )
  )
  [1] => Array 
  (
    …
  )
  [2] => Array 
  (
    …
  )
)
~~~

I generated a simplified PHP Array that included only the latitudes and longitudes, broken down by a sub-array. Each inner array was a location, and each array within that was a property. The first sub-array was actually the latitude and longitude of the location (this was used to centre the map).

## Setting Up Our Map Containers

For each item in our original `WP_Query` we created a `div` which had a unique ID. This allows us to reference the `div` to display the map which associates with the index of the array item we are in.

~~~html
<div id="map1"></div>
~~~

I created these when calling the original `WP_Query` to ensure there was the correct amount of elements. If you prefer, you could append these  in JavaScript.

## Connecting it all with JavaScript

Now we need to bring it all together. We are going to create a function which we will call to manage the PHP array. Just above the footer insert the following.

~~~javascript
<script>
function initMap() {

}
initMap();
<script>
~~~

Within the function, we will encode our PHP array into JSON so that it becomes a little easier, and cleaner, to work with. At the same time we will create an array to hold all of the map data.

~~~javascript
var locations = <?php echo json_encode( $phpArray ); ?>;
var map = [];
~~~

Using the JSON data we now have at our hand. we will write a for loop to loop around the locations until we reach the end of the JSON, grab the first latitude and longitude to define our centre point, and then create a map for each one.

~~~javascript
for (var i = 0; i < locations.length; i++) {
  var latlng = new google.maps.LatLng(locations[i][0][0], locations[i][0][1]);
  // create the map on the div with the ID + the index of the array we are on
  var map = new google.maps.Map(document.getElementById(‘map’ + i), {
    center: latlng,
    zoom: 13,
    scrollwheel: false,
    mapTypeControl: false,  
    draggable: true
  });
  maps.push(map);
}
~~~

This will now have successfully created a map for each location in our Array, to add the markers we need to expand the for loop a little. We do this by writing another for loop after the `maps.push(map)` line. This for loop will loop around the child array, pulling out all of the latitude and longitude values of the properties, yet ignoring the first one we used to set the map centre.

~~~javascript
for (var j = 0; j < locations[i].length; j++) {
  if( j != 0 ) {
    var loc = new google.maps.LatLng(locations[i][j][0], locations[i][j][1]);
    var marker = new google.maps.Marker({
      position: loc,
      map: map
    });
  }
}
~~~

To wrap this up the complete JavaScript would look a little something like this...

~~~javascript
<script>
  function initMap() {
    var locations = <?php echo json_encode( $mapHolder ); ?>;
    var maps = [];
    for (var i = 0; i < locations.length; i++) {
      var latlng = new google.maps.LatLng(locations[i][0][0], locations[i][0][1]);
      var map = new google.maps.Map(document.getElementById(‘map’ + i), {
        center: latlng,
        zoom: 13,
        scrollwheel: false,
        mapTypeControl: false,
        draggable: true
      });
      maps.push(map);
      for (var j = 0; j < locations[i].length; j++) {
        if(j != 0 ) {
          var loc = new google.maps.LatLng(locations[i][j][0], locations[i][j][1]);
          var marker = new google.maps.Marker({
            position: loc,
            map: map
          });
        }
      }
    }
  }
  
  initMap();
</script>
~~~

That should be all you need. If you bump into any issues, please let me know so I can update the code.